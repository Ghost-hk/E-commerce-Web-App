{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { getDoc, setDoc, doc, getFirestore } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAk4VpOS32g0B0-_2v0x58RK34wMDx4yRY\",\n  authDomain: \"e-commerce-web-app-65227.firebaseapp.com\",\n  projectId: \"e-commerce-web-app-65227\",\n  storageBucket: \"e-commerce-web-app-65227.appspot.com\",\n  messagingSenderId: \"614437600917\",\n  appId: \"1:614437600917:web:3944ae2e8f8bd3ed8da59c\"\n};\nconst firebaseApp = initializeApp(firebaseConfig); // Sing in with google\n\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider); //Adding users to db\n\nconst db = getFirestore();\nexport const creatUserDocumentFromAuth = async function (userAuth) {\n  let additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const userRefDoc = doc(db, \"users\", userAuth.uid);\n  const userSnapShot = await getDoc(userRefDoc); // if user dosn't exist\n\n  if (!userSnapShot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRefDoc, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo\n      });\n    } catch (err) {\n      console.error(\"err msg: \", err.message);\n    }\n  }\n\n  return userRefDoc;\n}; // Sing in with email and password\n\nexport const createAuthUserWhitEmailAndPwd = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","getDoc","setDoc","doc","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","creatUserDocumentFromAuth","userAuth","additionalInfo","userRefDoc","uid","userSnapShot","exists","displayName","email","createdAt","Date","err","console","error","message","createAuthUserWhitEmailAndPwd","password"],"sources":["/home/dawdi/Desktop/e-commerc_web-app/src/utils/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\n\nimport { getDoc, setDoc, doc, getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAk4VpOS32g0B0-_2v0x58RK34wMDx4yRY\",\n  authDomain: \"e-commerce-web-app-65227.firebaseapp.com\",\n  projectId: \"e-commerce-web-app-65227\",\n  storageBucket: \"e-commerce-web-app-65227.appspot.com\",\n  messagingSenderId: \"614437600917\",\n  appId: \"1:614437600917:web:3944ae2e8f8bd3ed8da59c\",\n};\n\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Sing in with google\nconst provider = new GoogleAuthProvider();\n\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\n\n//Adding users to db\nconst db = getFirestore();\n\nexport const creatUserDocumentFromAuth = async (\n  userAuth,\n  additionalInfo = {}\n) => {\n  const userRefDoc = doc(db, \"users\", userAuth.uid);\n  const userSnapShot = await getDoc(userRefDoc);\n\n  // if user dosn't exist\n  if (!userSnapShot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRefDoc, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInfo,\n      });\n    } catch (err) {\n      console.error(\"err msg: \", err.message);\n    }\n  }\n\n  return userRefDoc;\n};\n\n// Sing in with email and password\n\nexport const createAuthUserWhitEmailAndPwd = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACEC,OADF,EAEEC,eAFF,EAGEC,kBAHF,EAIEC,8BAJF,EAKEC,0BALF,QAMO,eANP;AAQA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,YAA9B,QAAkD,oBAAlD;AAEA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,0CAFS;EAGrBC,SAAS,EAAE,0BAHU;EAIrBC,aAAa,EAAE,sCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB;AASA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAD,CAAjC,C,CAEA;;AACA,MAAMQ,QAAQ,GAAG,IAAIf,kBAAJ,EAAjB;AAEAe,QAAQ,CAACC,mBAAT,CAA6B;EAC3BC,MAAM,EAAE;AADmB,CAA7B;AAIA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAApB;AACP,OAAO,MAAMqB,qBAAqB,GAAG,MAAMpB,eAAe,CAACmB,IAAD,EAAOH,QAAP,CAAnD,C,CAEP;;AACA,MAAMK,EAAE,GAAGd,YAAY,EAAvB;AAEA,OAAO,MAAMe,yBAAyB,GAAG,gBACvCC,QADuC,EAGpC;EAAA,IADHC,cACG,uEADc,EACd;EACH,MAAMC,UAAU,GAAGnB,GAAG,CAACe,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACG,GAAvB,CAAtB;EACA,MAAMC,YAAY,GAAG,MAAMvB,MAAM,CAACqB,UAAD,CAAjC,CAFG,CAIH;;EACA,IAAI,CAACE,YAAY,CAACC,MAAb,EAAL,EAA4B;IAC1B,MAAM;MAAEC,WAAF;MAAeC;IAAf,IAAyBP,QAA/B;IACA,MAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IAEA,IAAI;MACF,MAAM3B,MAAM,CAACoB,UAAD,EAAa;QACvBI,WADuB;QAEvBC,KAFuB;QAGvBC,SAHuB;QAIvB,GAAGP;MAJoB,CAAb,CAAZ;IAMD,CAPD,CAOE,OAAOS,GAAP,EAAY;MACZC,OAAO,CAACC,KAAR,CAAc,WAAd,EAA2BF,GAAG,CAACG,OAA/B;IACD;EACF;;EAED,OAAOX,UAAP;AACD,CAzBM,C,CA2BP;;AAEA,OAAO,MAAMY,6BAA6B,GAAG,OAAOP,KAAP,EAAcQ,QAAd,KAA2B;EACtE,IAAI,CAACR,KAAD,IAAU,CAACQ,QAAf,EAAyB;EACzB,OAAO,MAAMpC,8BAA8B,CAACiB,IAAD,EAAOW,KAAP,EAAcQ,QAAd,CAA3C;AACD,CAHM"},"metadata":{},"sourceType":"module"}